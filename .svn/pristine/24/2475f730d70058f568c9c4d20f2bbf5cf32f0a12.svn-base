<template>
  <div class="page page-bill">
    <div class="page-bar">
      <LayoutHor>
        <div slot="left">
          <Button size="small" @click="goBack" icon="chevron-left"  type="warning">返回</Button>
        </div>
        <div class="page-bar-title">{{pageTitle}}</div>
      </LayoutHor>
    </div>
    <Loading :loading="loading">
    <div class="baseinfo">
      <div class="subheader">
        单据表头
      </div>
      <table cellspacing="0" cellpadding="0">
        <tr>
          <td class="label">合同编号</td>
          <td><Input v-model="formItem.contractNo"></Input></td>
          <td class="label">客户</td>
          <td><Input v-model="formItem.customerName" :disabled="pageFlag == 2"  :readonly="true" icon="android-search" class="selectinput" @on-click="onSelectCustomer"></Input></td>

          <td class="label"></td>
          <td colspan="3">
            <Checkbox v-model="formItem.hasProcedure"
                :true-value="1" :false-value="0">含加工工序</Checkbox>
              &nbsp;
            <Checkbox v-model="formItem.isForeign"
                :true-value="1" :false-value="0">是否外销</Checkbox>
              &nbsp;
          </td>
        </tr>
        <tr>
          <td class="label">业务员</td>
          <td><Input readonly="readonly" v-model="formItem.salesName"  style="width:120px"></Input></td>
          <td class="label">签订日期</td>
          <td><DatePicker type="date" placeholder="" v-model="formItem.signDate" format="yyyy-MM-dd" style="width:120px"></DatePicker></td>
          <td class="label">签订地点</td>
          <td><Input v-model="formItem.signAddress"></Input></td>
        </tr>
        <tr>
          <td class="label">合同金额</td>
          <td style="color:red">{{formItem.amount}}</td>
          <td class="label">币种</td>
          <td>
            <Select v-model="formItem.currency" placeholder="币种" style="width:120px" >
              <Option v-for="item in currencyArgs" :value="item.argCode" :key="item.argCode">{{ item.argText }}</Option>
            </Select>
          </td>
          <td class="label">交货地点</td>
          <td><Input v-model="formItem.deliveryAddress"></Input></td>
        </tr>
        <tr> 
          <td class="label">备注</td>
          <td colspan="3"><Input v-model="formItem.remark"></Input></td> 
        </tr>
      </table>
    </div>
    <div>
      <div class="subheader">
        单据明细
      </div>
      <Editable ref="editable"
        :list="list"
        :unitArgs="unitArgs"
        :processRequireArgs="processRequireArgs"
        :editable="true"
        @on-amount-change="onAmountChange"
        @on-drawing-input="onDrawingInput"></Editable>
    </div>
    <div class="tooltip">
      * 在录入单据明细之前，请录入单据中的客户信息<br/>
      * 单据明细中的图号是唯一标识，录入图号光标离开后，自动加载物料数据

    </div>
    <div v-if="pageFlag == 3">
      <Input v-model="remark" type="textarea" placeholder="修订原因"></Input>
    </div>
    <table class="savebar" cellpadding="0" cellspacing="0">
      <tr>
        <td class="save" @click="save" v-if="pageFlag<=2">
          保存
        </td>
        <td class="save" @click="submitReversion" v-if="pageFlag==3">
          提交修订
        </td>
        <td class="reset" @click="reset">
          重置
        </td>
        <td></td>
      </tr>
    </table>
    </Loading>
    <SelectCustomer ref="selectCustomer"></SelectCustomer>
  </div>
</template>
<script>
  import Loading from '@/components/loading';
  import LayoutHor from '@/components/layout/LayoutHor';
  import Editable from './DetailEditable';
  import SelectCustomer from '@/components/customer/SelectCustomer';
  import page from '@/assets/js/page';
  import floatObj from '@/assets/js/floatObj';
  import process from '@/components/process-start';
  import UploadBox from '@/components/upload/Index';

  export default {
    components: {
      Loading,
      LayoutHor,
      Editable,
      SelectCustomer,
      UploadBox
    },
    data() {
      return {
        loading: 0,
        contractId:'',
        pageFlag:1,//1.新建 2.编辑 3.修订
        formItem:{
          "contractId":"",
          "contractNo":"",
          "customerId":"",
          "customerName":"",
          "signDate":null,
          "signAddress":"",
          "hasProcedure":0,
          "isForeign":0,
          "amount":0,
          "deliveryAddress":"",
          "sales":"",
          "salesName":"",
          "inDate":null,
          "currency":"",
          "currencyName":"",
          "files":null,
          "remark":"",
          "status":1,
          "wfInstId":"",
          "wfInstTime":"",
          "wfInstRemark":null,
          "revisionStatus":0,
          "revisionWfInstId":null,
          "revisionWfInstTime":null,
          "revisionWfInstRemark":null,
          "undoStatus":0,
          "undoWfInstId":null,
          "undoWfInstTime":null,
          "undoWfInstRemark":null
        },
        list:[],
        unitArgs:[],
        processRequireArgs:[],
        currencyArgs:[],
        oriItem:{},
        remark:'',
      }
    },
    mounted: function () {
      this.loadArgs();
      this.contractId = this.$route.query.id;
      this.pageFlag = 1;
      if(this.contractId){
        this.pageFlag = 2;
      }
      if(this.$route.query.reversion){
        this.pageFlag = 3;
      }
      if(this.pageFlag == 1){
        this.initNew();
      }
      if(this.pageFlag == 2){
        this.load();
      }
      if(this.pageFlag == 3){
        this.load();
      }
    },
    computed: {
      pageTitle(){
        if(this.pageFlag == 1){
          return '合同 - 创建';
        }
        if(this.pageFlag == 2){
          return '合同 - 编辑';
        }
        if(this.pageFlag == 3){
          return '合同 - 修订';
        }
      }
    },
    methods: {
      load() {
        this.loading = 1;
        this.$http.post("/api/contract/get?contractId=" + this.contractId,{}).then((res) => {
          this.loading = 0;
          if (res.data.code == 0) {
            if(res.data.data){
              this.oriItem = eval('('+JSON.stringify(res.data.data)+')');
              Object.assign(this.formItem,res.data.data);
              this.list = res.data.data.detailList;
            }else{
              this.$Message.error('询价单不存在！');
              this.goBack();
            }
          } else {
            this.$Message.error(res.data.message);
          }
        }).catch((error) => {
          this.loading = 0;
          this.$Message.error("操作失败！")
        });
      },
      loadArgs(){
        this.loadArg('process_require',(err,data)=>{
          if(err){
            this.$Message.error('加载参数出错：'+err);
          }else{
            this.processRequireArgs = data;
          }
        });
        this.loadArg('currency',(err,data)=>{
          if(err){
            this.$Message.error('加载参数出错：'+err);
          }else{
            this.currencyArgs = data;
          }
        });
        this.loadArg('unit',(err,data)=>{
          if(err){
            this.$Message.error('加载参数出错：'+err);
          }else{
            this.unitArgs = data;
          }
        });
      },
      loadArg(group,callback){
        this.$http.post("/api/arg/list", {argGroup:group}).then((res) => {
          if (res.data.code === 0) {
            callback(null,res.data.data);
          } else {
            callback(res.data.message);
          }
        }).catch((error) => {
          callback("请求失败!");
        });
      },
      initNew(){
        Object.assign(this.formItem,{
          "contractId":"",
          "contractNo":"",
          "customerId":"",
          "customerName":"",
          "signDate":page.formatDate(new Date(),'yyyy-MM-dd'),
          "signAddress":"",
          "hasProcedure":0,
          "isForeign":0,
          "amount":0,
          "deliveryAddress":"",
          "sales":"",
          "salesName":"",
          "inDate":null,
          "currency":"RMB",
          "currencyName":"",
          "files":null,
          "remark":"",
          "status":1,
          "wfInstId":"",
          "wfInstTime":"",
          "wfInstRemark":null,
          "revisionStatus":0,
          "revisionWfInstId":null,
          "revisionWfInstTime":null,
          "revisionWfInstRemark":null,
          "undoStatus":0,
          "undoWfInstId":null,
          "undoWfInstTime":null,
          "undoWfInstRemark":null
        });
        this.formItem.signDate = page.formatDate(new Date(),'yyyy-MM-dd');
        if(this.$user.empInfo){
          this.formItem.sales = this.$user.empInfo.empId;
          this.formItem.salesName = this.$user.empInfo.trueName;
        }
        this.list = [];
        this.list.push(this.$refs.editable.listNewRow());
        this.list.push(this.$refs.editable.listNewRow());
      },
      save(){

        var form = {
          detailList:[]
        };

        Object.assign(form,this.formItem);
        form.signDate = page.formatDate(form.signDate);

        // 表头信息
        if(form.customerId == null || form.customerId == ''){
          this.$Message.error('请选择客户！');
          return;
        }

        form.detailList = [];
        // 明细
        for(var i = 0;i<this.list.length;i++){
          var item = this.list[i];
          if(item.drawing != ''){
            if(item.materName =='' || item.materName == null){
              this.$Message.error('图号 ' + item.drawing + ' ,物料名称不能为空！');
              return;
            }
            if(item.unit =='' || item.unit == null){
              this.$Message.error('图号 ' + item.drawing + ' ,单位不能为空！');
              return;
            }
            item.deliveryDate = page.formatDate(item.deliveryDate);
            form.detailList.push(item);
          }
        } 

        // 提交
        this.loading = 1;
        var uri = '/api/contract/add';
        if(this.pageFlag == 2){
          uri = '/api/contract/update';
        }

        this.$http.post(uri, form).then((res) => {
          this.loading = 0;
          if (res.data.code == 0) {
            this.$Message.info("操作成功！");
            this.goBack();
          } else {
            this.$Message.error(res.data.message);
          }
        }).catch((error) => {
          this.loading = 0;
          this.$Message.error("请求失败，请重新操作")
        });
      },
      submitReversion(){
        var form = {
          detailList:[]
        };

        Object.assign(form,this.formItem);
        form.signDate = page.formatDate(form.signDate);

        // 表头信息
        if(form.customerId == null || form.customerId == ''){
          this.$Message.error('请选择客户！');
          return;
        }

        form.detailList = [];
        // 明细
        for(var i = 0;i<this.list.length;i++){
          var item = this.list[i];
          if(item.drawing != ''){
            if(item.materName =='' || item.materName == null){
              this.$Message.error('图号 ' + item.drawing + ' ,物料名称不能为空！');
              return;
            }
            if(item.unit =='' || item.unit == null){
              this.$Message.error('图号 ' + item.drawing + ' ,单位不能为空！');
              return;
            }
            item.deliveryDate = page.formatDate(item.deliveryDate);
            form.detailList.push(item);
          }
        }
        var options = {
          data:this.oriItem,
          data1:form,
          remark:this.remark,
          callback:(err,instid)=>{
            this.loading = 0;
            if(err){
              this.$Message.error(err.msg);
            }else{
                this.loading = 1;
                this.$http.post('/api/contract/revision/submit',{
                  contractId:this.contractId,
                  revisionWfInstId:instid
                }).then((res) => {
                  this.loading = 0;
                  if (res.data.code == 0) {
                    this.$Message.info('提交成功！');
                    this.goBack();
                  } else {
                    this.$Message.error(res.data.message);
                  }
                }).catch((error) => {
                  this.loading = 0;
                  this.$Message.error("操作失败！")
                });
            }
          }
        };
        process.startContractReversionAudit(options);
      },
      onSelectCustomer(){
        this.$refs.selectCustomer.open();
        this.$refs.selectCustomer.$off('on-ok');
        this.$refs.selectCustomer.$on('on-ok',(items)=>{
          if(items.length > 0){
            this.formItem.customerId = items[0].customerId;
            this.formItem.customerName = items[0].customerName;
          }
        });
      },
      onDrawingInput(item){
        if(this.formItem.customerId == null || this.formItem.customerId == ''){
          this.$Message.error('请选择客户！');
          return;
        }
        var materId = this.formItem.customerId + '-' + item.drawing;

        this.$http.post('/api/material/get?materId=' +materId, {}).then((res) => {
          if (res.data.code === 0 && res.data.data !=null) {
            item.materName = res.data.data.materName;
            item.unit = res.data.data.unit;
          }
        }).catch((error) => {
          this.$Message.error(error.message)
        });
      },
      onAmountChange(val){
        this.formItem.amount = val;
      },
      datePickerChange(val){
        this.formItem.signDate = val;
      },
      reset(){
        if(this.pageFlag == 1){
          this.initNew();
        }else {
          Object.assign(this.formItem,this.oriItem);
        }
      },
      goBack(){
        this.$router.push('/contract');
      }
    }
  }

</script>


